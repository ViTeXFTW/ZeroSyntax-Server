// Generated from ./server/src/antlr/MapIni.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class MapIniLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly INT = 20;
	public static readonly INT256 = 21;
	public static readonly FLOAT = 22;
	public static readonly BOOL = 23;
	public static readonly ID = 24;
	public static readonly SKIp = 25;
	public static readonly COMMENT = 26;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "INT", "INT256", "FLOAT", "BOOL", "ID", "SKIp", "COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'Object'", "'AddModule'", "'ReplaceModule'", "'Behavior'", 
		"'='", "'Body'", "'Draw'", "'ConditionState'", "'DefaultConditionState'", 
		"'TransitionState'", "'AliasConditionState'", "'IgnoreConditionStates'", 
		"'RemoveModule'", "'End'", "'end'", "'END'", "'.'", "'%'", "'\"'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "INT", 
		"INT256", "FLOAT", "BOOL", "ID", "SKIp", "COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MapIniLexer._LITERAL_NAMES, MapIniLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MapIniLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(MapIniLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "MapIni.g4"; }

	// @Override
	public get ruleNames(): string[] { return MapIniLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return MapIniLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return MapIniLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return MapIniLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1C\u0132\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t" +
		"\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15" +
		"\x05\x15\xEB\n\x15\x03\x15\x06\x15\xEE\n\x15\r\x15\x0E\x15\xEF\x03\x16" +
		"\x05\x16\xF3\n\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x05\x16\u0105\n\x16\x03\x17\x05\x17\u0108\n\x17\x03\x17\x06\x17\u010B" +
		"\n\x17\r\x17\x0E\x17\u010C\x03\x17\x03\x17\x06\x17\u0111\n\x17\r\x17\x0E" +
		"\x17\u0112\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\u011A\n\x18" +
		"\x03\x19\x03\x19\x07\x19\u011E\n\x19\f\x19\x0E\x19\u0121\v\x19\x03\x1A" +
		"\x06\x1A\u0124\n\x1A\r\x1A\x0E\x1A\u0125\x03\x1A\x03\x1A\x03\x1B\x03\x1B" +
		"\x07\x1B\u012C\n\x1B\f\x1B\x0E\x1B\u012F\v\x1B\x03\x1B\x03\x1B\x02\x02" +
		"\x02\x1C\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02" +
		"\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02" +
		"\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02" +
		"\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C\x03\x02\t\x03" +
		"\x022;\x03\x0226\x03\x0227\x07\x02--//C\\aac|\x06\x022;C\\aac|\x05\x02" +
		"\v\f\x0F\x0F\"\"\x04\x02\f\f\x0F\x0F\x02\u0140\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x03" +
		"7\x03\x02\x02\x02\x05>\x03\x02\x02\x02\x07H\x03\x02\x02\x02\tV\x03\x02" +
		"\x02\x02\v_\x03\x02\x02\x02\ra\x03\x02\x02\x02\x0Ff\x03\x02\x02\x02\x11" +
		"k\x03\x02\x02\x02\x13z\x03\x02\x02\x02\x15\x90\x03\x02\x02\x02\x17\xA0" +
		"\x03\x02\x02\x02\x19\xB4\x03\x02\x02\x02\x1B\xCA\x03\x02\x02\x02\x1D\xD7" +
		"\x03\x02\x02\x02\x1F\xDB\x03\x02\x02\x02!\xDF\x03\x02\x02\x02#\xE3\x03" +
		"\x02\x02\x02%\xE5\x03\x02\x02\x02\'\xE7\x03\x02\x02\x02)\xEA\x03\x02\x02" +
		"\x02+\xF2\x03\x02\x02\x02-\u0107\x03\x02\x02\x02/\u0119\x03\x02\x02\x02" +
		"1\u011B\x03\x02\x02\x023\u0123\x03\x02\x02\x025\u0129\x03\x02\x02\x02" +
		"78\x07Q\x02\x0289\x07d\x02\x029:\x07l\x02\x02:;\x07g\x02\x02;<\x07e\x02" +
		"\x02<=\x07v\x02\x02=\x04\x03\x02\x02\x02>?\x07C\x02\x02?@\x07f\x02\x02" +
		"@A\x07f\x02\x02AB\x07O\x02\x02BC\x07q\x02\x02CD\x07f\x02\x02DE\x07w\x02" +
		"\x02EF\x07n\x02\x02FG\x07g\x02\x02G\x06\x03\x02\x02\x02HI\x07T\x02\x02" +
		"IJ\x07g\x02\x02JK\x07r\x02\x02KL\x07n\x02\x02LM\x07c\x02\x02MN\x07e\x02" +
		"\x02NO\x07g\x02\x02OP\x07O\x02\x02PQ\x07q\x02\x02QR\x07f\x02\x02RS\x07" +
		"w\x02\x02ST\x07n\x02\x02TU\x07g\x02\x02U\b\x03\x02\x02\x02VW\x07D\x02" +
		"\x02WX\x07g\x02\x02XY\x07j\x02\x02YZ\x07c\x02\x02Z[\x07x\x02\x02[\\\x07" +
		"k\x02\x02\\]\x07q\x02\x02]^\x07t\x02\x02^\n\x03\x02\x02\x02_`\x07?\x02" +
		"\x02`\f\x03\x02\x02\x02ab\x07D\x02\x02bc\x07q\x02\x02cd\x07f\x02\x02d" +
		"e\x07{\x02\x02e\x0E\x03\x02\x02\x02fg\x07F\x02\x02gh\x07t\x02\x02hi\x07" +
		"c\x02\x02ij\x07y\x02\x02j\x10\x03\x02\x02\x02kl\x07E\x02\x02lm\x07q\x02" +
		"\x02mn\x07p\x02\x02no\x07f\x02\x02op\x07k\x02\x02pq\x07v\x02\x02qr\x07" +
		"k\x02\x02rs\x07q\x02\x02st\x07p\x02\x02tu\x07U\x02\x02uv\x07v\x02\x02" +
		"vw\x07c\x02\x02wx\x07v\x02\x02xy\x07g\x02\x02y\x12\x03\x02\x02\x02z{\x07" +
		"F\x02\x02{|\x07g\x02\x02|}\x07h\x02\x02}~\x07c\x02\x02~\x7F\x07w\x02\x02" +
		"\x7F\x80\x07n\x02\x02\x80\x81\x07v\x02\x02\x81\x82\x07E\x02\x02\x82\x83" +
		"\x07q\x02\x02\x83\x84\x07p\x02\x02\x84\x85\x07f\x02\x02\x85\x86\x07k\x02" +
		"\x02\x86\x87\x07v\x02\x02\x87\x88\x07k\x02\x02\x88\x89\x07q\x02\x02\x89" +
		"\x8A\x07p\x02\x02\x8A\x8B\x07U\x02\x02\x8B\x8C\x07v\x02\x02\x8C\x8D\x07" +
		"c\x02\x02\x8D\x8E\x07v\x02\x02\x8E\x8F\x07g\x02\x02\x8F\x14\x03\x02\x02" +
		"\x02\x90\x91\x07V\x02\x02\x91\x92\x07t\x02\x02\x92\x93\x07c\x02\x02\x93" +
		"\x94\x07p\x02\x02\x94\x95\x07u\x02\x02\x95\x96\x07k\x02\x02\x96\x97\x07" +
		"v\x02\x02\x97\x98\x07k\x02\x02\x98\x99\x07q\x02\x02\x99\x9A\x07p\x02\x02" +
		"\x9A\x9B\x07U\x02\x02\x9B\x9C\x07v\x02\x02\x9C\x9D\x07c\x02\x02\x9D\x9E" +
		"\x07v\x02\x02\x9E\x9F\x07g\x02\x02\x9F\x16\x03\x02\x02\x02\xA0\xA1\x07" +
		"C\x02\x02\xA1\xA2\x07n\x02\x02\xA2\xA3\x07k\x02\x02\xA3\xA4\x07c\x02\x02" +
		"\xA4\xA5\x07u\x02\x02\xA5\xA6\x07E\x02\x02\xA6\xA7\x07q\x02\x02\xA7\xA8" +
		"\x07p\x02\x02\xA8\xA9\x07f\x02\x02\xA9\xAA\x07k\x02\x02\xAA\xAB\x07v\x02" +
		"\x02\xAB\xAC\x07k\x02\x02\xAC\xAD\x07q\x02\x02\xAD\xAE\x07p\x02\x02\xAE" +
		"\xAF\x07U\x02\x02\xAF\xB0\x07v\x02\x02\xB0\xB1\x07c\x02\x02\xB1\xB2\x07" +
		"v\x02\x02\xB2\xB3\x07g\x02\x02\xB3\x18\x03\x02\x02\x02\xB4\xB5\x07K\x02" +
		"\x02\xB5\xB6\x07i\x02\x02\xB6\xB7\x07p\x02\x02\xB7\xB8\x07q\x02\x02\xB8" +
		"\xB9\x07t\x02\x02\xB9\xBA\x07g\x02\x02\xBA\xBB\x07E\x02\x02\xBB\xBC\x07" +
		"q\x02\x02\xBC\xBD\x07p\x02\x02\xBD\xBE\x07f\x02\x02\xBE\xBF\x07k\x02\x02" +
		"\xBF\xC0\x07v\x02\x02\xC0\xC1\x07k\x02\x02\xC1\xC2\x07q\x02\x02\xC2\xC3" +
		"\x07p\x02\x02\xC3\xC4\x07U\x02\x02\xC4\xC5\x07v\x02\x02\xC5\xC6\x07c\x02" +
		"\x02\xC6\xC7\x07v\x02\x02\xC7\xC8\x07g\x02\x02\xC8\xC9\x07u\x02\x02\xC9" +
		"\x1A\x03\x02\x02\x02\xCA\xCB\x07T\x02\x02\xCB\xCC\x07g\x02\x02\xCC\xCD" +
		"\x07o\x02\x02\xCD\xCE\x07q\x02\x02\xCE\xCF\x07x\x02\x02\xCF\xD0\x07g\x02" +
		"\x02\xD0\xD1\x07O\x02\x02\xD1\xD2\x07q\x02\x02\xD2\xD3\x07f\x02\x02\xD3" +
		"\xD4\x07w\x02\x02\xD4\xD5\x07n\x02\x02\xD5\xD6\x07g\x02\x02\xD6\x1C\x03" +
		"\x02\x02\x02\xD7\xD8\x07G\x02\x02\xD8\xD9\x07p\x02\x02\xD9\xDA\x07f\x02" +
		"\x02\xDA\x1E\x03\x02\x02\x02\xDB\xDC\x07g\x02\x02\xDC\xDD\x07p\x02\x02" +
		"\xDD\xDE\x07f\x02\x02\xDE \x03\x02\x02\x02\xDF\xE0\x07G\x02\x02\xE0\xE1" +
		"\x07P\x02\x02\xE1\xE2\x07F\x02\x02\xE2\"\x03\x02\x02\x02\xE3\xE4\x070" +
		"\x02\x02\xE4$\x03\x02\x02\x02\xE5\xE6\x07\'\x02\x02\xE6&\x03\x02\x02\x02" +
		"\xE7\xE8\x07$\x02\x02\xE8(\x03\x02\x02\x02\xE9\xEB\x07/\x02\x02\xEA\xE9" +
		"\x03\x02\x02\x02\xEA\xEB\x03\x02\x02\x02\xEB\xED\x03\x02\x02\x02\xEC\xEE" +
		"\t\x02\x02\x02\xED\xEC\x03\x02\x02\x02\xEE\xEF\x03\x02\x02\x02\xEF\xED" +
		"\x03\x02\x02\x02\xEF\xF0\x03\x02\x02\x02\xF0*\x03\x02\x02\x02\xF1\xF3" +
		"\x07/\x02\x02\xF2\xF1\x03\x02\x02\x02\xF2\xF3\x03\x02\x02\x02\xF3\u0104" +
		"\x03\x02\x02\x02\xF4\xF5\x072\x02\x02\xF5\xF6\t\x02\x02\x02\xF6\u0105" +
		"\t\x02\x02\x02\xF7\xF8\x073\x02\x02\xF8\xF9\t\x02\x02\x02\xF9\u0105\t" +
		"\x02\x02\x02\xFA\xFB\x074\x02\x02\xFB\xFC\t\x03\x02\x02\xFC\u0105\t\x02" +
		"\x02\x02\xFD\xFE\x074\x02\x02\xFE\xFF\x077\x02\x02\xFF\u0100\x03\x02\x02" +
		"\x02\u0100\u0105\t\x04\x02\x02\u0101\u0102\t\x02\x02\x02\u0102\u0105\t" +
		"\x02\x02\x02\u0103\u0105\t\x02\x02\x02\u0104\xF4\x03\x02\x02\x02\u0104" +
		"\xF7\x03\x02\x02\x02\u0104\xFA\x03\x02\x02\x02\u0104\xFD\x03\x02\x02\x02" +
		"\u0104\u0101\x03\x02\x02\x02\u0104\u0103\x03\x02\x02\x02\u0105,\x03\x02" +
		"\x02\x02\u0106\u0108\x07/\x02\x02\u0107\u0106\x03\x02\x02\x02\u0107\u0108" +
		"\x03\x02\x02\x02\u0108\u010A\x03\x02\x02\x02\u0109\u010B\t\x02\x02\x02" +
		"\u010A\u0109\x03\x02\x02\x02\u010B\u010C\x03\x02\x02\x02\u010C\u010A\x03" +
		"\x02\x02\x02\u010C\u010D\x03\x02\x02\x02\u010D\u010E\x03\x02\x02\x02\u010E" +
		"\u0110\x070\x02\x02\u010F\u0111\t\x02\x02\x02\u0110\u010F\x03\x02\x02" +
		"\x02\u0111\u0112\x03\x02\x02\x02\u0112\u0110\x03\x02\x02\x02\u0112\u0113" +
		"\x03\x02\x02\x02\u0113.\x03\x02\x02\x02\u0114\u0115\x07[\x02\x02\u0115" +
		"\u0116\x07g\x02\x02\u0116\u011A\x07u\x02\x02\u0117\u0118\x07P\x02\x02" +
		"\u0118\u011A\x07q\x02\x02\u0119\u0114\x03\x02\x02\x02\u0119\u0117\x03" +
		"\x02\x02\x02\u011A0\x03\x02\x02\x02\u011B\u011F\t\x05\x02\x02\u011C\u011E" +
		"\t\x06\x02\x02\u011D\u011C\x03\x02\x02\x02\u011E\u0121\x03\x02\x02\x02" +
		"\u011F\u011D\x03\x02\x02\x02\u011F\u0120\x03\x02\x02\x02\u01202\x03\x02" +
		"\x02\x02\u0121\u011F\x03\x02\x02\x02\u0122\u0124\t\x07\x02\x02\u0123\u0122" +
		"\x03\x02\x02\x02\u0124\u0125\x03\x02\x02\x02\u0125\u0123\x03\x02\x02\x02" +
		"\u0125\u0126\x03\x02\x02\x02\u0126\u0127\x03\x02\x02\x02\u0127\u0128\b" +
		"\x1A\x02\x02\u01284\x03\x02\x02\x02\u0129\u012D\x07=\x02\x02\u012A\u012C" +
		"\n\b\x02\x02\u012B\u012A\x03\x02\x02\x02\u012C\u012F\x03\x02\x02\x02\u012D" +
		"\u012B\x03\x02\x02\x02\u012D\u012E\x03\x02\x02\x02\u012E\u0130\x03\x02" +
		"\x02\x02\u012F\u012D\x03\x02\x02\x02\u0130\u0131\b\x1B\x02\x02\u01316" +
		"\x03\x02\x02\x02\x0E\x02\xEA\xEF\xF2\u0104\u0107\u010C\u0112\u0119\u011F" +
		"\u0125\u012D\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MapIniLexer.__ATN) {
			MapIniLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MapIniLexer._serializedATN));
		}

		return MapIniLexer.__ATN;
	}

}

